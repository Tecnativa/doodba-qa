#!/usr/bin/env python3
import os
import logging
import subprocess
import sys

import docker
import docker.utils

_logger = logging.getLogger("doodba-qa")
_logger.setLevel(logging.DEBUG if os.environ["VERBOSE"] == "1"
                 else logging.INFO)
client = docker.from_env()
error = None
preexisting_vol = False

if not os.environ["QA_VOLUME"]:
    qa_volume = client.volumes.create()
else:
    try:
        qa_volume = client.volumes.get(os.environ["QA_VOLUME"])
        preexisting_vol = True
    except docker.errors.NotFound:
        qa_volume = client.volumes.create(os.environ["QA_VOLUME"])

# Copy data to the QA volume
if not preexisting_vol:
    _logger.info("Created QA transition volume %s", qa_volume.name)
    _logger.debug("Creating transit container")
    client.images.pull("debian", "9")
    transit = client.containers.create(
        "debian:9",
        volumes={
            qa_volume.name: {"bind": "/qa", "mode": "rw"},
        },
    )
    _logger.info("Filling QA volume with tools")
    with docker.utils.tar("/qa") as qa_tar:
        transit.put_archive("/qa", qa_tar)
    _logger.debug("Removing transit container")
    transit.remove()

cmd = sys.argv[1:]
_logger.debug("Run wrapped command: %r", cmd)
result = subprocess.run(
    cmd,
    env=dict(os.environ, QA_VOLUME=qa_volume.name),
)
sys.exit(result.returncode)
