#!/usr/bin/env python3
"""
Run any insider script.

This file needs to be symlinked for each of the available insider scripts to
serve as an entrypoint only for them.
"""
import logging
import os
import pprint
import subprocess
import sys
import tarfile
import tempfile

import docker

logging.root.setLevel(logging.DEBUG if os.environ["VERBOSE"] == "1"
                      else logging.INFO)
LINTERS = {"flake8", "pylint"}

# Check this file is being executed correctly
script = os.path.basename(sys.argv[0])
full_script = "/usr/local/src/{}".format(script)
if not os.path.exists(full_script):
    sys.exit("Called in a wrong way! {} should exist".format(full_script))

if sys.argv[1:]:
    sys.exit("Script {} does not accept arguments".format(script))
container_name = subprocess.check_output(["container-name"])
cmd = [
    "docker-compose", "run", "--rm",
    "-e", "ADDON_CATEGORIES",
    "-e", "VERBOSE",
    # Mount insider dependencies
    "-v", "{}:/qa".format(os.environ["QA_VOLUME"]),
    # HACK https://github.com/docker/compose/issues/4688
    "--name", container_name.decode().strip(),
    # Avoid possible routing problems in Traefik
    "--label", "traefik.enable=false",
]
if script in LINTERS:
    modes = {
        "loose": "travis_run_pylint.cfg",
        "strict": "travis_run_pylint_pr.cfg",
        "beta": "travis_run_pylint_beta.cfg",
    }
    cmd += [
        # Linters don't need other containers
        "--no-deps",
        "-e", "WAIT_DB=false",
        "-e", "UNACCENT=false",
        # Direct linter configuration
        "-e", "LINT_DISABLE",
        "-e", "LINT_ENABLE",
        # Choose pylint configuration file to use
        "-e", "PYLINT_CONFIG_FILE={}".format(modes[os.environ["LINT_MODE"]]),
    ]
# Get source code to be executed
with open(full_script, "rb") as source:
    shebang = source.readline()
    if not shebang.startswith(b"#!"):
        raise Exception("Scripts need a shebang")
    # TODO Find a better way to execute code interpreting its shebang
    shebang = shebang.replace(b"#!", b"", 1).split()
    code = source.read()
cmd += ["odoo"] + shebang + ["-c", code]

# Create the desired network if missing
client = docker.from_env()
try:
    client.networks.get(os.environ["SHARED_NETWORK"])
except docker.errors.NotFound:
    client.networks.create(os.environ["SHARED_NETWORK"])

# Execute insider command
result = subprocess.run(cmd)

# Obtain artifacts from QA volume
logging.debug("Creating transit container")
transit = client.containers.create(
    "debian:9",
    volumes={
        os.environ["QA_VOLUME"]: {"bind": "/qa", "mode": "rw"},
    },
)
logging.debug("Loading produced artifacts, if any")
tar_stream, stat = transit.get_archive("/qa/artifacts")
with tempfile.TemporaryFile() as tmp:
    for chunk in tar_stream:
        tmp.write(chunk)
    tmp.seek(0)
    # Extract artifacts into current container's expected path
    with tarfile.open(fileobj=tmp) as tar:
        tar.extractall()

# List artifacts, in a special block to avoid walking dir if not needed
if os.environ["VERBOSE"] == "1":
    logging.debug(
        "Extracted artifacts:\n%s",
        pprint.pformat(list(os.walk("artifacts"))),
    )

# Same return code as the insider command
sys.exit(result.returncode)
