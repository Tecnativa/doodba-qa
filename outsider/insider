#!/usr/bin/env python3
"""
Run any insider script.

This file needs to be symlinked for each of the available insider scripts to
serve as an entrypoint only for them.
"""
import logging
import os
import pprint
import subprocess
import sys
import tempfile
import zipfile

_logger = logging.getLogger("doodba-qa")
_logger.setLevel(logging.DEBUG if os.environ["VERBOSE"] == "1"
                 else logging.INFO)
LINTERS = {"flake8", "pylint"}

# Check this file is being executed correctly
script = os.path.basename(sys.argv[0])
full_script = None
with open("/usr/local/src/insider/{}".format(script), "r") as fd:
    full_script = fd.read()
cmd = [
    "docker-compose", "run", "--rm",
    "-e", "ADDON_CATEGORIES",
    "-e", "VERBOSE",
    # Avoid possible routing problems in Traefik
    "--label", "traefik.enable=false",
]
if os.environ["VERBOSE"] == "1":
    cmd += [
        "-e", "LOG_LEVEL=DEBUG",
    ]
if script in LINTERS:
    modes = {
        "loose": "travis_run_pylint.cfg",
        "strict": "travis_run_pylint_pr.cfg",
        "beta": "travis_run_pylint_beta.cfg",
    }
    cmd += [
        # Linters don't need other containers
        "--no-deps",
        "-e", "WAIT_DB=false",
        "-e", "UNACCENT=false",
        # Direct linter configuration
        "-e", "LINT_DISABLE",
        "-e", "LINT_ENABLE",
        # Choose pylint configuration file to use
        "-e", "PYLINT_CONFIG_FILE={}".format(modes[os.environ["LINT_MODE"]]),
    ]
cmd += ["odoo", "/qa/insider", full_script, *sys.argv[1:]]

# Execute insider command
with tempfile.TemporaryFile() as tmp_fd, \
        os.fdopen(sys.stderr.fileno(), "wb", closefd=False) as stderr_bytes:
    result = subprocess.run(cmd, stdout=tmp_fd, stderr=stderr_bytes)
    tmp_fd.flush()
    tmp_fd.seek(0)
    # Obtain artifacts or redirect logs
    if not zipfile.is_zipfile(tmp_fd):
        tmp_fd.seek(0)
        stderr_bytes.write(tmp_fd.read())
        stderr_bytes.flush()
    else:
        _logger.debug("Uncompressing artifacts")
        tmp_fd.seek(0)
        with zipfile.ZipFile(tmp_fd) as zip_fd:
            zip_fd.extractall("artifacts")

# List artifacts, in a special block to avoid walking dir if not needed
if os.environ["VERBOSE"] == "1":
    _logger.debug(
        "Extracted artifacts:\n%s",
        pprint.pformat(list(os.walk("artifacts"))),
    )

# Same return code as the insider command
sys.exit(result.returncode)
